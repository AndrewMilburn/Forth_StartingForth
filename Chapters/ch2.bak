cls
empty
cr

\ 17 5 + .
\  22 ok

\ 7 8 * .
\ 56 ok

\ 7 4 - .
\ 3  ok

\ 10.00 2.25 + .
\ 225  ok..
\ .s [2] 1000 0  ok..

\ 21 4 / .
\ 5  ok

\ 10000 10 * .
\ 100000  ok

\ They've obviously enlarged integers...
\ From the W32F Manual
\ Each entry is held as a 32-bit, twos-complement integer.
\ In unsigned hexadecimal, the 32-bit values can run from  00000000 to
\ FFFFFFFF. In decimal they are -2147483648 to  2147483647.
\ Later we'll see Forth also supports 64-bit integers and
\ 64 bit floating point numbers. Stack values may be treated as signed
\ or unsigned.

\ 4 + (17 * 12)
\ 17 12 * 4 + .
\ 208  ok

\ 17 20 132 3 9 + + + + .
\ 181  ok

\ (3+9) * (4+6)
\ 3 9 + 4 6 + * .
\ 120  ok

\ : YARDS>IN   36 * ;
\ : FT>IN   12 * ;
\ 10 yards>in . 360  ok
\ 2 ft>in . 24  ok

: YARDS   36 * ;
: FEET   12 * ;
: INCHES   ;
\ 10 yards 2 feet + 9 inches + . 393  ok

: YARD   yards ;
: FOOT   feet ;
: INCH   ;
\ 1 yard 2 feet + 1 inch + . 61  ok

: 5#SUM   + + + + ;
\ 17 20 132 3 9 5#sum . 181  ok

: 2B1   ( c b a -- ab+c )
	* + ;

: 2B2   ( c a b -- result )
	4 * - 6 / + ;

: 2B3 ( a b -- result )
	8 * / ;

: 2B4 ( a b -- result )
	* 200 / ;

: 2B5 ( a a -- result )
	2 * 3 + * ;

\ : 2B6 ( c b a -- result )
\ -  ?????????

\ 22 4 / . 5  ok
\ p61

\ 22 4 /mod . 5  ok.
\ . 2  ok

: QUARTERS   ( x1 x2 -- q r )
	4 /mod ." is " . ." Whole Units and " . ." quarters" ;
\ 22 quarters is 5 Whole Units and 2 quarters ok

\ 22 4 mod . 2  ok

\ 1 2 .s [2] 1 2  ok..
\   ok..
\ swap . . 1 2  ok

: 2B6 ( c a b -- result )
	- swap / ;
\ 2 10 4 2b6 . 3  ok

\ 4 dup * . 16  ok

\ 4 2 over + * . 24  ok

\ 1 2 3 rot - * . 4  ok

\ 1 drop . 0
\        ^
\ Error(-4): . stack underflow

\ .s  empty  ok
\ 1 2 3 .s [3] 1 2 3  ok...
\ rot .s [3] 2 3 1  ok...
\ Note - This is slightly different than the book, where his
\ .s gives 0 for an empty stack, and 0 as the first number when
\ .s-ing. Which kinda makes it look like there's 4 numbers on the stack

: 2C1   ( abc -- cba)
	swap rot ;
\ 1 2 3 2c1 .s [3] 3 2 1  ok...

: MY_OVER   ( abc -- abcb)
	swap dup rot swap ;
\ 4 5 6 my_over .s [4] 4 5 6 5  ok....

: <ROT   ( abc -- cab)
	rot rot ;
\ 1 2 3 <rot .s [3] 3 1 2  ok...

: 2C4   ( n -- result)
	dup 1 + swap / ;
\ 5 2c4 .s [1] 1  ok.
\ xx
\ ^^
\ Error(-13): XX is undefined
\ 1 2c4 .s [1] 2  ok.

: 2C5   ( x -- result)
	dup 7 * 5 + * ;
\ 3 2c5 .s [1] 78  ok.

: 2C6   ( a b -- result)
	over 9 * Swap - * ;
(( 2 2c6 .s [1] 54600  ok.
\ 2 over 9 * swap - * .s  empty  ok
\ 2 over .s [2] 2 -109310496  ok..
\ So OVER doesn't throw an underflow when it really should
\ 2 3 2c6 .s [1] 30  ok.
\ : e 2 . ; ))







































